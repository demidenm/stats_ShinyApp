mediation_specr <- function(X, Y, M, Cov, df, lavaan_model, model_boot) {
## Step 1
# Creating variable permutations for lists in X, Y, M, Cov
var_permutations <- as.matrix(expand.grid(X = X,
Y = Y,
M = M,
Age = Cov))
# Check the number of permutations that are created basic ont he input strings
total_permutes <- length(X)*length(Y)*length(M)*length(Cov)
print(paste0("Total Permutations for Current Multiverse: ", total_permutes))
# Step 2
# Create data.frame of output using model pre
##  the var_permutations are run across the matrics into the function.
data_rep <-
apply(X = var_permutations, MARGIN = 1, function (combos) {
require(lavaan)
permuted.df <- df[combos] # pull data that only has variables we're interested in
# selection variable names to replace in model_fit()
X = as.character(combos[1])
Y = as.character(combos[2])
M = as.character(combos[3])
Age = as.character(combos[4])
# we use "glue()" here in the model sytnax to example {variables} with the values assigned above.
mediation_model <- glue('
# Direct Effect (X->Y), c - path
{Y} ~ c*{X} + {Age}
# Meidation (X -> M), a path
{M} ~ a*{X} + Age
# Mediation (M -> Y), b path
{Y} ~ b*{M}
# Indirect Effect (a*b)
ind := a*b
# Total Effect
total := c + (a*b)
')
# Herre we run and save the model parameters to "fit"
fit <-lavaan::sem(model = mediation_model,
data = permuted.df)
# Step 2
# Extra the variables we will be using in subsequent steps
require(parameters)
model_out = data.frame(model_parameters(fit, standardize = FALSE))
med_vars = lavNames(fit)
data.frame("X"  = as.character(med_vars[3]),
"Y" = as.character(med_vars[1]),
"M" = as.character(med_vars[2]),
"Direct_estimate" = model_out[1,4], "Direct_std.error" = model_out[1,5],
"Direct_conf.low" = model_out[1,6],  "Direct_conf.high" = model_out[1,7],
"Direct_p.value" = model_out[1,9],
"Apath_estimate" = model_out[3,4], "Apath_std.error" = model_out[3,5],
"Apath_conf.low" = model_out[3,6],  "Apath_conf.high" = model_out[3,7],
"Apath_p.value" = model_out[3,9],
"Bpath_estimate" = model_out[5,4], "Bpath_std.error" = model_out[5,5],
"Bpath_conf.low" = model_out[5,6],  "Bpath_conf.high" = model_out[5,7],
"Bpath_p.value" = model_out[5,9],
"Indirect_estimate" = model_out[7,4], "Indirect_std.error" = model_out[7,5],
"Indirect_conf.low" = model_out[7,6],  "Indirect_conf.high" = model_out[7,7],
"Indirect_p.value" = model_out[7,9],
"Total_estimate" = model_out[8,4], "Total_std.error" = model_out[8,5],
"Total_conf.low" = model_out[8,6],  "Total_conf.high" = model_out[8,7],
"Total_p.value" = model_out[8,9])
}) %>%
bind_rows() %>%  # combined by rows the lists from lapply
gather(key = "Effect", value = "Coefficient", Direct_estimate:Total_p.value) %>% # we take all colum names Direct:Total_p and save the variable names, i.e., Direct, to the key "Effect" and the value to "Coefficient"
separate(col = "Effect", into = c("Effect","Type"), sep = "_", extra = "merge", fill = "right") %>% # because we want to combine this data to similar format as we safe our thijseen file, we want to separate all variables with '_', that way the first value 'Direct' or 'Apath' is in "Effect" and the type of value, i.e., SE or lower CI, is in 'Type' column. We fill these to the right
spread(key = "Type", value = "Coefficient") %>% # now that we have the type column, we spread this data out from long to wide
mutate(Observations = fitMeasures(fit)[21], N_Parameters = fitMeasures(fit)[1])
}
stopCluster(cl)
set.seed(1989)
mediation_replicate <- mediation_specr(X = Rep_iv, Y = Rep_dv, M = Rep_m, Cov = Rep_cov,
df = data_d, lavaan_model = mediation_model, model_boot = 200)
mediation_replicate <- mediation_specr(X = Rep_iv, Y = Rep_dv, M = Rep_m, Cov = Rep_cov,
df = data_d, lavaan_model = mediation_model, model_boot = 200)
View(mediation_replicate)
mediation_specr <- function(X, Y, M, Cov, df, lavaan_model, model_boot) {
## Step 1
# Creating variable permutations for lists in X, Y, M, Cov
var_permutations <- as.matrix(expand.grid(X = X,
Y = Y,
M = M,
Age = Cov))
# Check the number of permutations that are created basic ont he input strings
total_permutes <- length(X)*length(Y)*length(M)*length(Cov)
print(paste0("Total Permutations for Current Multiverse: ", total_permutes))
# Step 2
# Create data.frame of output using model pre
##  the var_permutations are run across the matrics into the function.
data_rep <-
apply(X = var_permutations, MARGIN = 1, function (combos) {
require(lavaan)
permuted.df <- df[combos] # pull data that only has variables we're interested in
# selection variable names to replace in model_fit()
X = as.character(combos[1])
Y = as.character(combos[2])
M = as.character(combos[3])
Age = as.character(combos[4])
# we use "glue()" here in the model sytnax to example {variables} with the values assigned above.
mediation_model <- glue('
# Direct Effect (X->Y), c - path
{Y} ~ c*{X} + {Age}
# Meidation (X -> M), a path
{M} ~ a*{X} + Age
# Mediation (M -> Y), b path
{Y} ~ b*{M}
# Indirect Effect (a*b)
ind := a*b
# Total Effect
total := c + (a*b)
')
# Herre we run and save the model parameters to "fit"
fit <-lavaan::sem(model = mediation_model,
data = permuted.df)
# Step 2
# Extra the variables we will be using in subsequent steps
require(parameters)
model_out = data.frame(model_parameters(fit, standardize = FALSE))
med_vars = lavNames(fit)
data.frame("X"  = as.character(med_vars[3]),
"Y" = as.character(med_vars[1]),
"M" = as.character(med_vars[2]),
"Direct_estimate" = model_out[1,4], "Direct_std.error" = model_out[1,5],
"Direct_conf.low" = model_out[1,6],  "Direct_conf.high" = model_out[1,7],
"Direct_p.value" = model_out[1,9],
"Apath_estimate" = model_out[3,4], "Apath_std.error" = model_out[3,5],
"Apath_conf.low" = model_out[3,6],  "Apath_conf.high" = model_out[3,7],
"Apath_p.value" = model_out[3,9],
"Bpath_estimate" = model_out[5,4], "Bpath_std.error" = model_out[5,5],
"Bpath_conf.low" = model_out[5,6],  "Bpath_conf.high" = model_out[5,7],
"Bpath_p.value" = model_out[5,9],
"Indirect_estimate" = model_out[7,4], "Indirect_std.error" = model_out[7,5],
"Indirect_conf.low" = model_out[7,6],  "Indirect_conf.high" = model_out[7,7],
"Indirect_p.value" = model_out[7,9],
"Total_estimate" = model_out[8,4], "Total_std.error" = model_out[8,5],
"Total_conf.low" = model_out[8,6],  "Total_conf.high" = model_out[8,7],
"Total_p.value" = model_out[8,9])
}) %>%
bind_rows() %>%  # combined by rows the lists from lapply
gather(key = "Effect", value = "Coefficient", Direct_estimate:Total_p.value) %>% # we take all colum names Direct:Total_p and save the variable names, i.e., Direct, to the key "Effect" and the value to "Coefficient"
separate(col = "Effect", into = c("Effect","Type"), sep = "_", extra = "merge", fill = "right") %>% # because we want to combine this data to similar format as we safe our thijseen file, we want to separate all variables with '_', that way the first value 'Direct' or 'Apath' is in "Effect" and the type of value, i.e., SE or lower CI, is in 'Type' column. We fill these to the right
spread(key = "Type", value = "Coefficient") %>% # now that we have the type column, we spread this data out from long to wide
dplyr::mutate(Observations = fitMeasures(fit)[21], N_Parameters = fitMeasures(fit)[1])
}
mediation_specr <- function(X, Y, M, Cov, df, lavaan_model, model_boot) {
## Step 1
# Creating variable permutations for lists in X, Y, M, Cov
var_permutations <- as.matrix(expand.grid(X = X,
Y = Y,
M = M,
Age = Cov))
# Check the number of permutations that are created basic ont he input strings
total_permutes <- length(X)*length(Y)*length(M)*length(Cov)
print(paste0("Total Permutations for Current Multiverse: ", total_permutes))
# Step 2
# Create data.frame of output using model pre
##  the var_permutations are run across the matrics into the function.
data_rep <-
apply(X = var_permutations, MARGIN = 1, function (combos) {
require(lavaan)
permuted.df <- df[combos] # pull data that only has variables we're interested in
# selection variable names to replace in model_fit()
X = as.character(combos[1])
Y = as.character(combos[2])
M = as.character(combos[3])
Age = as.character(combos[4])
# we use "glue()" here in the model sytnax to example {variables} with the values assigned above.
mediation_model <- glue('
# Direct Effect (X->Y), c - path
{Y} ~ c*{X} + {Age}
# Meidation (X -> M), a path
{M} ~ a*{X} + Age
# Mediation (M -> Y), b path
{Y} ~ b*{M}
# Indirect Effect (a*b)
ind := a*b
# Total Effect
total := c + (a*b)
')
# Herre we run and save the model parameters to "fit"
fit <-lavaan::sem(model = mediation_model,
data = permuted.df)
# Step 2
# Extra the variables we will be using in subsequent steps
require(parameters)
model_out = data.frame(model_parameters(fit, standardize = FALSE))
med_vars = lavNames(fit)
spec_data <-
data.frame("X"  = as.character(med_vars[3]),
"Y" = as.character(med_vars[1]),
"M" = as.character(med_vars[2]),
"Direct_estimate" = model_out[1,4], "Direct_std.error" = model_out[1,5],
"Direct_conf.low" = model_out[1,6],  "Direct_conf.high" = model_out[1,7],
"Direct_p.value" = model_out[1,9],
"Apath_estimate" = model_out[3,4], "Apath_std.error" = model_out[3,5],
"Apath_conf.low" = model_out[3,6],  "Apath_conf.high" = model_out[3,7],
"Apath_p.value" = model_out[3,9],
"Bpath_estimate" = model_out[5,4], "Bpath_std.error" = model_out[5,5],
"Bpath_conf.low" = model_out[5,6],  "Bpath_conf.high" = model_out[5,7],
"Bpath_p.value" = model_out[5,9],
"Indirect_estimate" = model_out[7,4], "Indirect_std.error" = model_out[7,5],
"Indirect_conf.low" = model_out[7,6],  "Indirect_conf.high" = model_out[7,7],
"Indirect_p.value" = model_out[7,9],
"Total_estimate" = model_out[8,4], "Total_std.error" = model_out[8,5],
"Total_conf.low" = model_out[8,6],  "Total_conf.high" = model_out[8,7],
"Total_p.value" = model_out[8,9])
}) %>%
bind_rows() %>%  # combined by rows the lists from lapply
gather(key = "Effect", value = "Coefficient", Direct_estimate:Total_p.value) %>% # we take all colum names Direct:Total_p and save the variable names, i.e., Direct, to the key "Effect" and the value to "Coefficient"
separate(col = "Effect", into = c("Effect","Type"), sep = "_", extra = "merge", fill = "right") %>% # because we want to combine this data to similar format as we safe our thijseen file, we want to separate all variables with '_', that way the first value 'Direct' or 'Apath' is in "Effect" and the type of value, i.e., SE or lower CI, is in 'Type' column. We fill these to the right
spread(key = "Type", value = "Coefficient") %>% # now that we have the type column, we spread this data out from long to wide
spec_data$Observations = fitMeasures(fit)[21]; spec_data$N_Parameters = fitMeasures(fit)[1]
}
mediation_replicate <- mediation_specr(X = Rep_iv, Y = Rep_dv, M = Rep_m, Cov = Rep_cov,
df = data_d, lavaan_model = mediation_model, model_boot = 200)
mediation_specr <- function(X, Y, M, Cov, df, lavaan_model, model_boot) {
## Step 1
# Creating variable permutations for lists in X, Y, M, Cov
var_permutations <- as.matrix(expand.grid(X = X,
Y = Y,
M = M,
Age = Cov))
# Check the number of permutations that are created basic ont he input strings
total_permutes <- length(X)*length(Y)*length(M)*length(Cov)
print(paste0("Total Permutations for Current Multiverse: ", total_permutes))
# Step 2
# Create data.frame of output using model pre
##  the var_permutations are run across the matrics into the function.
data_rep <-
apply(X = var_permutations, MARGIN = 1, function (combos) {
require(lavaan)
permuted.df <- df[combos] # pull data that only has variables we're interested in
# selection variable names to replace in model_fit()
X = as.character(combos[1])
Y = as.character(combos[2])
M = as.character(combos[3])
Age = as.character(combos[4])
# we use "glue()" here in the model sytnax to example {variables} with the values assigned above.
mediation_model <- glue('
# Direct Effect (X->Y), c - path
{Y} ~ c*{X} + {Age}
# Meidation (X -> M), a path
{M} ~ a*{X} + Age
# Mediation (M -> Y), b path
{Y} ~ b*{M}
# Indirect Effect (a*b)
ind := a*b
# Total Effect
total := c + (a*b)
')
# Herre we run and save the model parameters to "fit"
fit <-lavaan::sem(model = mediation_model,
data = permuted.df)
# Step 2
# Extra the variables we will be using in subsequent steps
require(parameters)
model_out = data.frame(model_parameters(fit, standardize = FALSE))
med_vars = lavNames(fit)
spec_data <-
data.frame("X"  = as.character(med_vars[3]),
"Y" = as.character(med_vars[1]),
"M" = as.character(med_vars[2]),
"Direct_estimate" = model_out[1,4], "Direct_std.error" = model_out[1,5],
"Direct_conf.low" = model_out[1,6],  "Direct_conf.high" = model_out[1,7],
"Direct_p.value" = model_out[1,9],
"Apath_estimate" = model_out[3,4], "Apath_std.error" = model_out[3,5],
"Apath_conf.low" = model_out[3,6],  "Apath_conf.high" = model_out[3,7],
"Apath_p.value" = model_out[3,9],
"Bpath_estimate" = model_out[5,4], "Bpath_std.error" = model_out[5,5],
"Bpath_conf.low" = model_out[5,6],  "Bpath_conf.high" = model_out[5,7],
"Bpath_p.value" = model_out[5,9],
"Indirect_estimate" = model_out[7,4], "Indirect_std.error" = model_out[7,5],
"Indirect_conf.low" = model_out[7,6],  "Indirect_conf.high" = model_out[7,7],
"Indirect_p.value" = model_out[7,9],
"Total_estimate" = model_out[8,4], "Total_std.error" = model_out[8,5],
"Total_conf.low" = model_out[8,6],  "Total_conf.high" = model_out[8,7],
"Total_p.value" = model_out[8,9])
}) %>%
bind_rows() %>%  # combined by rows the lists from lapply
gather(key = "Effect", value = "Coefficient", Direct_estimate:Total_p.value) %>% # we take all colum names Direct:Total_p and save the variable names, i.e., Direct, to the key "Effect" and the value to "Coefficient"
separate(col = "Effect", into = c("Effect","Type"), sep = "_", extra = "merge", fill = "right") %>% # because we want to combine this data to similar format as we safe our thijseen file, we want to separate all variables with '_', that way the first value 'Direct' or 'Apath' is in "Effect" and the type of value, i.e., SE or lower CI, is in 'Type' column. We fill these to the right
spread(key = "Type", value = "Coefficient") # now that we have the type column, we spread this data out from long to wide
spec_data$Observations = fitMeasures(fit)[21]; spec_data$N_Parameters = fitMeasures(fit)[1]
}
# list variables for mediation
Rep_iv = c("Fam_Env")
Rep_dv = c("Amygdala_Vol","ACC_Thick","ACC_Area","ACC_FA","L_Amy_CON","R_Amy_CON")
Rep_m = c("Pubert_PR")
Rep_cov = c("Age")
set.seed(1989)
mediation_replicate <- mediation_specr(X = Rep_iv, Y = Rep_dv, M = Rep_m, Cov = Rep_cov,
df = data_d, lavaan_model = mediation_model, model_boot = 200)
View(mediation_replicate)
rm(mediation_replicate)
mediation_replicate <- mediation_specr(X = Rep_iv, Y = Rep_dv, M = Rep_m, Cov = Rep_cov,
df = data_d, lavaan_model = mediation_model, model_boot = 200)
mediation_specr <- function(X, Y, M, Cov, df, lavaan_model, model_boot) {
## Step 1
# Creating variable permutations for lists in X, Y, M, Cov
var_permutations <- as.matrix(expand.grid(X = X,
Y = Y,
M = M,
Age = Cov))
# Check the number of permutations that are created basic ont he input strings
total_permutes <- length(X)*length(Y)*length(M)*length(Cov)
print(paste0("Total Permutations for Current Multiverse: ", total_permutes))
# Step 2
# Create data.frame of output using model pre
##  the var_permutations are run across the matrics into the function.
data_rep <-
apply(X = var_permutations, MARGIN = 1, function (combos) {
require(lavaan)
permuted.df <- df[combos] # pull data that only has variables we're interested in
# selection variable names to replace in model_fit()
X = as.character(combos[1])
Y = as.character(combos[2])
M = as.character(combos[3])
Age = as.character(combos[4])
# we use "glue()" here in the model sytnax to example {variables} with the values assigned above.
mediation_model <- glue('
# Direct Effect (X->Y), c - path
{Y} ~ c*{X} + {Age}
# Meidation (X -> M), a path
{M} ~ a*{X} + Age
# Mediation (M -> Y), b path
{Y} ~ b*{M}
# Indirect Effect (a*b)
ind := a*b
# Total Effect
total := c + (a*b)
')
# Herre we run and save the model parameters to "fit"
fit <-lavaan::sem(model = mediation_model,
data = permuted.df)
# Step 2
# Extra the variables we will be using in subsequent steps
require(parameters)
model_out = data.frame(model_parameters(fit, standardize = FALSE))
med_vars = lavNames(fit)
spec_data <- data.frame("X"  = as.character(med_vars[3]),
"Y" = as.character(med_vars[1]),
"M" = as.character(med_vars[2]),
"Direct_estimate" = model_out[1,4], "Direct_std.error" = model_out[1,5],
"Direct_conf.low" = model_out[1,6],  "Direct_conf.high" = model_out[1,7],
"Direct_p.value" = model_out[1,9],
"Apath_estimate" = model_out[3,4], "Apath_std.error" = model_out[3,5],
"Apath_conf.low" = model_out[3,6],  "Apath_conf.high" = model_out[3,7],
"Apath_p.value" = model_out[3,9],
"Bpath_estimate" = model_out[5,4], "Bpath_std.error" = model_out[5,5],
"Bpath_conf.low" = model_out[5,6],  "Bpath_conf.high" = model_out[5,7],
"Bpath_p.value" = model_out[5,9],
"Indirect_estimate" = model_out[7,4], "Indirect_std.error" = model_out[7,5],
"Indirect_conf.low" = model_out[7,6],  "Indirect_conf.high" = model_out[7,7],
"Indirect_p.value" = model_out[7,9],
"Total_estimate" = model_out[8,4], "Total_std.error" = model_out[8,5],
"Total_conf.low" = model_out[8,6],  "Total_conf.high" = model_out[8,7],
"Total_p.value" = model_out[8,9])
# add model observations & parameters N
spec_data$Observations = fitMeasures(fit)[21]; spec_data$N_Parameters = fitMeasures(fit)[1]
}) %>%
bind_rows() %>%  # combined by rows the lists from lapply
gather(key = "Effect", value = "Coefficient", Direct_estimate:Total_p.value) %>% # we take all colum names Direct:Total_p and save the variable names, i.e., Direct, to the key "Effect" and the value to "Coefficient"
separate(col = "Effect", into = c("Effect","Type"), sep = "_", extra = "merge", fill = "right") %>% # because we want to combine this data to similar format as we safe our thijseen file, we want to separate all variables with '_', that way the first value 'Direct' or 'Apath' is in "Effect" and the type of value, i.e., SE or lower CI, is in 'Type' column. We fill these to the right
spread(key = "Type", value = "Coefficient") # now that we have the type column, we spread this data out from long to wide
}
# list variables for mediation
Rep_iv = c("Fam_Env")
Rep_dv = c("Amygdala_Vol","ACC_Thick","ACC_Area","ACC_FA","L_Amy_CON","R_Amy_CON")
Rep_m = c("Pubert_PR")
Rep_cov = c("Age")
set.seed(1989)
mediation_replicate <- mediation_specr(X = Rep_iv, Y = Rep_dv, M = Rep_m, Cov = Rep_cov,
df = data_d, lavaan_model = mediation_model, model_boot = 200)
mediation_specr <- function(X, Y, M, Cov, df, lavaan_model, model_boot) {
## Step 1
# Creating variable permutations for lists in X, Y, M, Cov
var_permutations <- as.matrix(expand.grid(X = X,
Y = Y,
M = M,
Age = Cov))
# Check the number of permutations that are created basic ont he input strings
total_permutes <- length(X)*length(Y)*length(M)*length(Cov)
print(paste0("Total Permutations for Current Multiverse: ", total_permutes))
# Step 2
# Create data.frame of output using model pre
##  the var_permutations are run across the matrics into the function.
data_rep <-
apply(X = var_permutations, MARGIN = 1, function (combos) {
require(lavaan)
permuted.df <- df[combos] # pull data that only has variables we're interested in
# selection variable names to replace in model_fit()
X = as.character(combos[1])
Y = as.character(combos[2])
M = as.character(combos[3])
Age = as.character(combos[4])
# we use "glue()" here in the model sytnax to example {variables} with the values assigned above.
mediation_model <- glue('
# Direct Effect (X->Y), c - path
{Y} ~ c*{X} + {Age}
# Meidation (X -> M), a path
{M} ~ a*{X} + Age
# Mediation (M -> Y), b path
{Y} ~ b*{M}
# Indirect Effect (a*b)
ind := a*b
# Total Effect
total := c + (a*b)
')
# Herre we run and save the model parameters to "fit"
fit <-lavaan::sem(model = mediation_model,
data = permuted.df)
# Step 2
# Extra the variables we will be using in subsequent steps
require(parameters)
model_out = data.frame(model_parameters(fit, standardize = FALSE))
med_vars = lavNames(fit)
spec_data <- data.frame("X"  = as.character(med_vars[3]),
"Y" = as.character(med_vars[1]),
"M" = as.character(med_vars[2]),
"Direct_estimate" = model_out[1,4], "Direct_std.error" = model_out[1,5],
"Direct_conf.low" = model_out[1,6],  "Direct_conf.high" = model_out[1,7],
"Direct_p.value" = model_out[1,9],
"Apath_estimate" = model_out[3,4], "Apath_std.error" = model_out[3,5],
"Apath_conf.low" = model_out[3,6],  "Apath_conf.high" = model_out[3,7],
"Apath_p.value" = model_out[3,9],
"Bpath_estimate" = model_out[5,4], "Bpath_std.error" = model_out[5,5],
"Bpath_conf.low" = model_out[5,6],  "Bpath_conf.high" = model_out[5,7],
"Bpath_p.value" = model_out[5,9],
"Indirect_estimate" = model_out[7,4], "Indirect_std.error" = model_out[7,5],
"Indirect_conf.low" = model_out[7,6],  "Indirect_conf.high" = model_out[7,7],
"Indirect_p.value" = model_out[7,9],
"Total_estimate" = model_out[8,4], "Total_std.error" = model_out[8,5],
"Total_conf.low" = model_out[8,6],  "Total_conf.high" = model_out[8,7],
"Total_p.value" = model_out[8,9])
# add model observations & parameters N
spec_data$Observations = fitMeasures(fit)[21]; spec_data$N_Parameters = fitMeasures(fit)[1]
return(spec_data)
}) %>%
bind_rows() %>%  # combined by rows the lists from lapply
gather(key = "Effect", value = "Coefficient", Direct_estimate:Total_p.value) %>% # we take all colum names Direct:Total_p and save the variable names, i.e., Direct, to the key "Effect" and the value to "Coefficient"
separate(col = "Effect", into = c("Effect","Type"), sep = "_", extra = "merge", fill = "right") %>% # because we want to combine this data to similar format as we safe our thijseen file, we want to separate all variables with '_', that way the first value 'Direct' or 'Apath' is in "Effect" and the type of value, i.e., SE or lower CI, is in 'Type' column. We fill these to the right
spread(key = "Type", value = "Coefficient") # now that we have the type column, we spread this data out from long to wide
}
# list variables for mediation
Rep_iv = c("Fam_Env")
Rep_dv = c("Amygdala_Vol","ACC_Thick","ACC_Area","ACC_FA","L_Amy_CON","R_Amy_CON")
Rep_m = c("Pubert_PR")
Rep_cov = c("Age")
set.seed(1989)
mediation_replicate <- mediation_specr(X = Rep_iv, Y = Rep_dv, M = Rep_m, Cov = Rep_cov,
df = data_d, lavaan_model = mediation_model, model_boot = 200)
View(mediation_replicate)
library(mbess)
library(MBESS)
install.packages("MBESS")
library(MBESS)
F2Rsquare(23, 1, 30)
F2Rsquare(16.99, 1, 30)
F2Rsquare(3.09, 2, 30)
library(ggplot2)
d <- rnorm(193, mena = 18.97, sd = 2.95 )
d <- rnorm(193, mean = 18.97, sd = 2.95 )
d <- data.frame(rnorm(193, mean = 18.97, sd = 2.95))
View(d)
d <- data.frame(age = rnorm(193, mean = 18.97, sd = 2.95))
d %>% ggplot(aes(x = age)) + geom_histogram()
d %>% ggplot(aes(x = age)) + geom_histogram()
library(tidyverse)
d %>% ggplot(aes(x = age)) + geom_histogram()
d <- data.frame(age = rnorm(193, mean = 14.09, sd = 2.95))
d %>% ggplot(aes(x = age)) + geom_histogram() + theme_minimal()
shiny::runApp('Desktop/UM/shiny_app/stats_ShinyApp')
runApp('Desktop/UM/shiny_app/stats_ShinyApp')
runApp('Desktop/UM/shiny_app/stats_ShinyApp')
x = c(1,
2,
3,
4,
5,
6,
7,
8,
9,
10)
y = c(2,
3,
2,
2,
45,
6,
7,
78,
8,
6)
data = data.frame(x = x, y = y)
summary(lm(y ~ x, data = data))
summary(lm(x ~ y, data = data))
summary(lm(y ~ x, data = data))
runApp('Desktop/UM/shiny_app/stats_ShinyApp')
summary(lm(y ~ x, data = data))
mean(data$x)
mean(data$y)
runApp('Desktop/UM/shiny_app/stats_ShinyApp')
summary(lm(y ~ x, data = data))
cor(data$x, data$y, method = c("perason"))
cor(data$x, data$y, method = c("pearson"))
lm.beta(lm(y ~ x, data = data))
runApp('Desktop/UM/shiny_app/stats_ShinyApp')
runApp('Desktop/UM/shiny_app/stats_ShinyApp')
runApp('Desktop/UM/shiny_app/stats_ShinyApp')
runApp('Desktop/UM/shiny_app/stats_ShinyApp')
shiny::runApp('Desktop/UM/shiny_app/stats_ShinyApp')
runApp('Desktop/UM/shiny_app/stats_ShinyApp')
